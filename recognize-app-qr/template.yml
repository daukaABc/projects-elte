AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31
- AWS::CodeStar

Parameters:
  ProjectId:
    Type: String
    Description: AWS CodeStar projectID used to associate new resources to team members
  CodeDeployRole:
    Type: String
    Description: IAM role to allow AWS CodeDeploy to manage deployment of AWS Lambda functions
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: ''

Globals:
  Function:
    AutoPublishAlias: live
    DeploymentPreference:
      Enabled: true
      Type: Canary10Percent5Minutes
      Role: !Ref CodeDeployRole

Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: Recognize-Prod
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: given_name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: family_name
          AttributeDataType: String
          Mutable: true
          Required: true
      LambdaConfig:
        PostConfirmation: !GetAtt RecognizePostVerify.Arn
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: Recognize-ProdClient
      UserPoolId: !Ref UserPool
      GenerateSecret: false
  WebsiteEndpoint:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.get
      Runtime: nodejs8.10
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Events:
        WebsiteAPI:
          Type: Api
          Properties:
            Path: /website
            Method: get
  RecognizeUsers:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: "email"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "email"
        KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: "RecognizeUsersProd"
  RecognizeGroups:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: "id"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "id"
        KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: "RecognizeGroupsProd"
  RecognizeSessions:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: "group"
        AttributeType: "S"
      - AttributeName: "id"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "id"
        KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      GlobalSecondaryIndexes:
      - IndexName: "group-index"
        KeySchema:
        - AttributeName: "group"
          KeyType: "HASH"
        Projection:
          ProjectionType: "ALL"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
      TableName: "RecognizeSessionsProd"
  RecognizeAttendance:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: "id"
        AttributeType: "S"
      - AttributeName: "session"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "id"
        KeyType: "HASH"
      - AttributeName: "session"
        KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      GlobalSecondaryIndexes:
      - IndexName: "seshindex"
        KeySchema:
        - AttributeName: "session"
          KeyType: "HASH"
        Projection:
          ProjectionType: "ALL"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
      TableName: "RecognizeAttendanceProd"
  RecognizePostVerify:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs8.10
      CodeUri: './LambdaFunctions/RecognizePostVerify'
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
  RecognizeCreateGroup:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs8.10
      CodeUri: './LambdaFunctions/RecognizeCreateGroup'
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
  RecognizeAttendSession:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs8.10
      CodeUri: './LambdaFunctions/RecognizeAttendSession'
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
  RecognizeCreateSession:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs8.10
      CodeUri: './LambdaFunctions/RecognizeCreateSession'
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
  RecognizeEnrollUser:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs8.10
      CodeUri: './LambdaFunctions/RecognizeEnrollUser'
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
  RecognizeGetGroupDetails:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs8.10
      CodeUri: './LambdaFunctions/RecognizeGetGroupDetails'
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
  RecognizeGetGroupSessions:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs8.10
      CodeUri: './LambdaFunctions/RecognizeGetGroupSessions'
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
  RecognizeGetSessionAttendances:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs8.10
      CodeUri: './LambdaFunctions/RecognizeGetSessionAttendances'
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
  RecognizeGetUserAttendingGroups:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs8.10
      CodeUri: './LambdaFunctions/RecognizeGetUserAttendingGroups'
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
  RecognizeGetUserCreatedGroups:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs8.10
      CodeUri: './LambdaFunctions/RecognizeGetUserCreatedGroups'
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
  RecognizeApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: RecognizeApi
      Body:
        swagger: 2.0
        info:
          version: 1.0.0
          title: RecognizeApi
        paths:
          /api:
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /api/group:
            post:
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - RecognizeAuthorizer: []
              x-amazon-apigateway-integration:
                uri:
                  Fn::Join:
                    - ""
                    - - "arn:aws:apigateway:"
                      - !Ref AWS::Region
                      - ":lambda:path/2015-03-31/functions/"
                      - !GetAtt RecognizeCreateGroup.Arn
                      - "/invocations"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /api/group/{groupId}:
            get:
              produces:
              - "application/json"
              parameters:
              - name: "groupId"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - RecognizeAuthorizer: []
              x-amazon-apigateway-integration:
                uri:
                  Fn::Join:
                    - ""
                    - - "arn:aws:apigateway:"
                      - !Ref AWS::Region
                      - ":lambda:path/2015-03-31/functions/"
                      - !GetAtt RecognizeGetGroupDetails.Arn
                      - "/invocations"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            put:
              produces:
              - "application/json"
              parameters:
              - name: "groupId"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - RecognizeAuthorizer: []
              x-amazon-apigateway-integration:
                uri:
                  Fn::Join:
                    - ""
                    - - "arn:aws:apigateway:"
                      - !Ref AWS::Region
                      - ":lambda:path/2015-03-31/functions/"
                      - !GetAtt RecognizeEnrollUser.Arn
                      - "/invocations"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /api/group/{groupId}/session:
            get:
              produces:
              - "application/json"
              parameters:
              - name: "groupId"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - RecognizeAuthorizer: []
              x-amazon-apigateway-integration:
                uri:
                  Fn::Join:
                    - ""
                    - - "arn:aws:apigateway:"
                      - !Ref AWS::Region
                      - ":lambda:path/2015-03-31/functions/"
                      - !GetAtt RecognizeGetGroupSessions.Arn
                      - "/invocations"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            post:
              produces:
              - "application/json"
              parameters:
              - name: "groupId"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - RecognizeAuthorizer: []
              x-amazon-apigateway-integration:
                uri:
                  Fn::Join:
                    - ""
                    - - "arn:aws:apigateway:"
                      - !Ref AWS::Region
                      - ":lambda:path/2015-03-31/functions/"
                      - !GetAtt RecognizeCreateSession.Arn
                      - "/invocations"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /api/session:
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /api/session/{sessionId}:
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /api/session/{sessionId}/attendance:
            get:
              produces:
              - "application/json"
              parameters:
              - name: "sessionId"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - RecognizeAuthorizer: []
              x-amazon-apigateway-integration:
                uri:
                  Fn::Join:
                    - ""
                    - - "arn:aws:apigateway:"
                      - !Ref AWS::Region
                      - ":lambda:path/2015-03-31/functions/"
                      - !GetAtt RecognizeGetSessionAttendances.Arn
                      - "/invocations"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            post:
              produces:
              - "application/json"
              parameters:
              - name: "sessionId"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - RecognizeAuthorizer: []
              x-amazon-apigateway-integration:
                uri:
                  Fn::Join:
                    - ""
                    - - "arn:aws:apigateway:"
                      - !Ref AWS::Region
                      - ":lambda:path/2015-03-31/functions/"
                      - !GetAtt RecognizeAttendSession.Arn
                      - "/invocations"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /api/user:
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /api/user/attending-groups:
            get:
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - RecognizeAuthorizer: []
              x-amazon-apigateway-integration:
                uri:
                  Fn::Join:
                    - ""
                    - - "arn:aws:apigateway:"
                      - !Ref AWS::Region
                      - ":lambda:path/2015-03-31/functions/"
                      - !GetAtt RecognizeGetUserAttendingGroups.Arn
                      - "/invocations"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /api/user/created-groups:
            get:
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - RecognizeAuthorizer: []
              x-amazon-apigateway-integration:
                uri:
                  Fn::Join:
                    - ""
                    - - "arn:aws:apigateway:"
                      - !Ref AWS::Region
                      - ":lambda:path/2015-03-31/functions/"
                      - !GetAtt RecognizeGetUserCreatedGroups.Arn
                      - "/invocations"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
        securityDefinitions:
          RecognizeAuthorizer:
            type: "apiKey"
            name: "Authorization"
            in: "header"
            x-amazon-apigateway-authtype: "cognito_user_pools"
            x-amazon-apigateway-authorizer:
              providerARNs:
                - !GetAtt UserPool.Arn
              type: "cognito_user_pools"
        definitions:
          Empty:
            type: "object"
            title: "Empty Schema"
  RecognizeApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: Prod deployment May 19 23:06
      RestApiId: !Ref RecognizeApi
      StageName: prod
  UserPoolLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      Principal: cognito-idp.amazonaws.com
      FunctionName: !Ref RecognizePostVerify
      SourceArn: !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*'
  CreateGroupApiInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RecognizeCreateGroup
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:"
            - !Ref AWS::Region
            - ":"
            - !Ref AWS::AccountId
            - ":"
            - !Ref RecognizeApi
            - "/*"
  AttendSessionApiInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RecognizeAttendSession
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:"
            - !Ref AWS::Region
            - ":"
            - !Ref AWS::AccountId
            - ":"
            - !Ref RecognizeApi
            - "/*"
  CreateSessionApiInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RecognizeCreateSession
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:"
            - !Ref AWS::Region
            - ":"
            - !Ref AWS::AccountId
            - ":"
            - !Ref RecognizeApi
            - "/*"
  EnrollUserApiInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RecognizeEnrollUser
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:"
            - !Ref AWS::Region
            - ":"
            - !Ref AWS::AccountId
            - ":"
            - !Ref RecognizeApi
            - "/*"
  GetGroupDetailsApiInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RecognizeGetGroupDetails
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:"
            - !Ref AWS::Region
            - ":"
            - !Ref AWS::AccountId
            - ":"
            - !Ref RecognizeApi
            - "/*"
  GetGroupSessionsApiInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RecognizeGetGroupSessions
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:"
            - !Ref AWS::Region
            - ":"
            - !Ref AWS::AccountId
            - ":"
            - !Ref RecognizeApi
            - "/*"
  GetSessionAttendancesApiInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RecognizeGetSessionAttendances
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:"
            - !Ref AWS::Region
            - ":"
            - !Ref AWS::AccountId
            - ":"
            - !Ref RecognizeApi
            - "/*"
  GetUserAttendingGroupsApiInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RecognizeGetUserAttendingGroups
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:"
            - !Ref AWS::Region
            - ":"
            - !Ref AWS::AccountId
            - ":"
            - !Ref RecognizeApi
            - "/*"
  GetUserCreatedGroupsApiInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RecognizeGetUserCreatedGroups
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:"
            - !Ref AWS::Region
            - ":"
            - !Ref AWS::AccountId
            - ":"
            - !Ref RecognizeApi
            - "/*"
  LambdaExecutionRole:
    Description: Creating service role in IAM for AWS Lambda
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'CodeStar-${ProjectId}-Execution${Stage}'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        -  arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        -  arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
